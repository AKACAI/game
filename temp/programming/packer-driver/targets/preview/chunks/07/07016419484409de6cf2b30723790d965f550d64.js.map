{"version":3,"sources":["file:///D:/cocos_projects/physics_education_game/assets/scripts/modules/game/ObjectBase.ts"],"names":["_decorator","Component","Color","Vec2","Graphics","PolygonCollider2D","RigidBody2D","ERigidBody2DType","Vec3","Phy_Group","ccclass","property","ObjectBase","defaultLineWidth","defaultLineColor","BLACK","defaultFillColor","WHITE","create","_graphics","node","getComponent","addComponent","_collider","_rigidbody","init","objectType","info","objectParam","vertices","length","console","log","_objectType","_localVertices","_name","name","_phyGroup","phyGroup","_isStatic","isStatic","_lineWidth","lineWidth","_lineColor","lineColor","_fillColor","fillColor","_tipData","initPolygon","initCollider","initDynamic","reset","strokeColor","moveTo","x","y","i","lineTo","close","stroke","fill","points","group","GAMEOBJECT","enabled","sensor","type","Static","Dynamic","_curSpeed","ZERO","linearVelocity","setTipData","data","getTipData","getType","getObjectParam","contains","pointPos","crossings","nodePos","getWorldPosition","forEach","vertex","rotation","getEulerAngles","Math","cos","z","sin","push","curPos","nextPos","slope","cond1","cond2","above","mouseOnObject","isMouseOn","param","pause","resume"],"mappings":"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","sourcesContent":["import { _decorator, Component, Color, Vec2, Graphics, PolygonCollider2D, RigidBody2D, ERigidBody2DType, Vec3 } from \"cc\";\nimport { Phy_Group } from \"../../manager/game_manager/GameDefinition\";\nimport { MouseParam } from \"../../manager/game_manager/GameManager\";\nimport { GameTipData } from \"../ui/game_tip/GameTipItem\";\nimport { ObjectType } from \"./ObjectFactory\";\nimport LogManager from \"../../utils/LogManager\";\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('ObjectBase')\nexport class ObjectBase extends Component {\n    protected readonly defaultLineWidth: number = 2;\n    protected readonly defaultLineColor: Color = Color.BLACK;\n    protected readonly defaultFillColor: Color = Color.WHITE;\n\n    protected _objectType: ObjectType;\n    protected _localVertices: Vec2[];\n    protected _phyGroup: Phy_Group;\n    protected _isStatic: boolean;\n\n    protected _name: string;\n    protected _lineWidth: number;\n    protected _lineColor: Color;\n    protected _fillColor: Color;\n    protected _tipData: GameTipData[];\n\n    protected _graphics: Graphics;\n    protected _collider: PolygonCollider2D;\n    protected _rigidbody: RigidBody2D;\n\n    protected _curSpeed: Vec2;\n\n    public create(): void {\n        this._graphics = this.node.getComponent(Graphics);\n        if (!this._graphics) {\n            this._graphics = this.node.addComponent(Graphics);\n        }\n        this._collider = this.node.getComponent(PolygonCollider2D);\n        if (!this._collider) {\n            this._collider = this.node.addComponent(PolygonCollider2D);\n        }\n        this._rigidbody = this.node.getComponent(RigidBody2D);\n        if (!this._rigidbody) {\n            this._rigidbody = this.node.addComponent(RigidBody2D);\n        }\n    }\n\n    public init(objectType: ObjectType, info: any, objectParam: ObjectParam) {\n        let vertices = info as Vec2[];\n        if (!vertices || vertices.length < 3) {\n            console.log(\"生成的物体的顶点数不能小于3\");\n            return;\n        }\n        if (!objectParam) {\n            return\n        }\n        this._graphics = this.node.getComponent(Graphics);\n        if (!this._graphics) {\n            this._graphics = this.node.addComponent(Graphics);\n        }\n        this._collider = this.node.getComponent(PolygonCollider2D);\n        if (!this._collider) {\n            this._collider = this.node.addComponent(PolygonCollider2D);\n        }\n        this._rigidbody = this.node.getComponent(RigidBody2D);\n        if (!this._rigidbody) {\n            this._rigidbody = this.node.addComponent(RigidBody2D);\n        }\n\n        this._objectType = objectType;\n        this._localVertices = vertices;\n        this._name = objectParam.name;\n        this._phyGroup = objectParam.phyGroup;\n        this._isStatic = objectParam.isStatic;\n        this._lineWidth = objectParam.lineWidth ? objectParam.lineWidth : this.defaultLineWidth;\n        this._lineColor = objectParam.lineColor ? objectParam.lineColor : this.defaultLineColor;\n        this._fillColor = objectParam.fillColor ? objectParam.fillColor : this.defaultFillColor;\n        this._tipData = [];\n\n        this.initPolygon();\n        this.initCollider();\n        this.initDynamic();\n        this.reset();\n    }\n\n    protected initPolygon() {\n        this._graphics.lineWidth = this._lineWidth;\n        this._graphics.strokeColor = this._lineColor;\n        this._graphics.fillColor = this._fillColor;\n\n        let vertices = this._localVertices;\n        this._graphics.moveTo(vertices[0].x, vertices[0].y);\n        for (let i = 1; i < vertices.length; i++) {\n            this._graphics.lineTo(vertices[i].x, vertices[i].y);\n        }\n        this._graphics.close();\n        this._graphics.stroke();\n        this._graphics.fill();\n    }\n\n    protected initCollider() {\n        this._collider.points = this._localVertices;\n        if (this._phyGroup) {\n            this._collider.group = this._phyGroup;\n        }\n        else {\n            this._collider.group = Phy_Group.GAMEOBJECT;\n        }\n        this._collider.enabled = true;      // 激活碰撞体\n        this._collider.sensor = false;      // 不是触发器\n    }\n\n    protected initDynamic() {\n        if (this._phyGroup) {\n            this._rigidbody.group = this._phyGroup;\n        }\n        else {\n            this._rigidbody.group = Phy_Group.GAMEOBJECT;\n        }\n        if (this._isStatic) {\n            this._rigidbody.type = ERigidBody2DType.Static;\n        }\n        else {\n            this._rigidbody.type = ERigidBody2DType.Dynamic;\n        }\n    }\n\n    protected reset() {\n        this._curSpeed = Vec2.ZERO;\n        if (this._rigidbody) {\n            this._rigidbody.linearVelocity = this._curSpeed;\n        }\n    }\n\n    public setTipData(data: GameTipData[]) {\n        this._tipData = data;\n    }\n\n    public getTipData(): GameTipData[] {\n        return this._tipData;\n    }\n\n    public getType(): ObjectType {\n        return this._objectType;\n    }\n\n    public getObjectParam(): ObjectParam {\n        return {\n            name: this._name,\n            lineWidth: this._lineWidth,\n            lineColor: this._lineColor,\n            fillColor: this._fillColor,\n        }\n    }\n\n    // 碰撞体内是否包含点\n    // https://blog.csdn.net/zsjzliziyang/article/details/108813349\n    public contains(pointPos: Vec2): boolean {\n        let crossings = 0;\n\n        let nodePos = this.node.getWorldPosition();\n        let vertices = [];\n        this._localVertices.forEach(vertex => {\n            let rotation: Vec3 = new Vec3();\n            this.node.rotation.getEulerAngles(rotation);\n            let x = vertex.x * Math.cos(rotation.z) * vertex.y * Math.sin(rotation.z);\n            let y = -vertex.x * Math.sin(rotation.z) * vertex.y * Math.cos(rotation.z);\n            vertices.push(new Vec2(x + nodePos.x, y + nodePos.y));\n        })\n        for (let i = 0; i < vertices.length; i++) {\n            let curPos = vertices[i];\n            let nextPos = (i + 1 == vertices.length) ? vertices[0] : vertices[i + 1];\n            let slope = (nextPos.y - curPos.y) / (nextPos.x - curPos.x);\n            let cond1 = (curPos.x <= pointPos.x) && (nextPos.x > pointPos.x);\n            let cond2 = (nextPos.x <= pointPos.x) && (curPos.x > pointPos.x);\n            let above = (pointPos.y < slope * (pointPos.x - curPos.x) + curPos.y);\n            if ((cond1 || cond2) && above) {\n                crossings++;\n            }\n        }\n        return (crossings % 2 != 0);\n    }\n\n    public mouseOnObject(isMouseOn: boolean, param: MouseParam) {\n\n    }\n\n    public pause() {\n        //LogManager.log(\"AAAAAAAAAA\", this._rigidbody.linearVelocity)\n        if (this._rigidbody) {\n            this._curSpeed = this._rigidbody.linearVelocity;\n            this._rigidbody.linearVelocity = Vec2.ZERO;\n        }\n    }\n\n    public resume() {\n        //LogManager.log(\"BBBBBBBBBB\", this._rigidbody.linearVelocity)\n        if (this._rigidbody) {\n            this._rigidbody.linearVelocity = this._curSpeed;\n        }\n    }\n\n\n}\n\nexport interface ObjectParam {\n    name: string,\n    phyGroup?: Phy_Group,\n    isStatic?: boolean,\n    lineWidth?: number,\n    lineColor?: Color,\n    fillColor?: Color,\n}"]}