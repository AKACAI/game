{"version":3,"sources":["file:///E:/education_game/game/assets/scripts/modules/game/ObjectBase.ts"],"names":["_decorator","Component","Color","Vec2","Graphics","PolygonCollider2D","RigidBody2D","ERigidBody2DType","Vec3","v2","Phy_Group","ccclass","property","ObjectBase","defaultLineWidth","defaultLineColor","BLACK","defaultFillColor","WHITE","create","_graphics","node","getComponent","addComponent","_collider","_rigidbody","init","objectType","info","objectParam","physicsParam","vertices","length","console","log","_objectType","_localVertices","_name","name","_phyGroup","phyGroup","_isStatic","isStatic","_lineWidth","lineWidth","_lineColor","lineColor","_fillColor","fillColor","_tipData","initPolygon","initCollider","initDynamic","setFriction","friction","reset","strokeColor","moveTo","x","y","i","lineTo","close","stroke","fill","points","group","GAMEOBJECT","enabled","sensor","type","Static","Dynamic","_curSpeed","ZERO","linearVelocity","_friction","addForce","force","applyForceToCenter","setTipData","data","getTipData","getType","getObjectParam","contains","pointPos","crossings","nodePos","getWorldPosition","forEach","vertex","rotation","getEulerAngles","angle","Math","PI","z","cos","sin","push","curPos","nextPos","slope","cond1","cond2","above","mouseOnObject","isMouseOn","param","pause","resume"],"mappings":"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","sourcesContent":["import { _decorator, Component, Color, Vec2, Graphics, PolygonCollider2D, RigidBody2D, ERigidBody2DType, Vec3, v2 } from \"cc\";\nimport { Phy_Group } from \"../../manager/game_manager/GameDefinition\";\nimport { MouseParam } from \"../../manager/game_manager/GameManager\";\nimport { GameTipData } from \"../ui/game_tip/GameTipItem\";\nimport { ObjectType } from \"./ObjectFactory\";\nimport LogManager from \"../../utils/LogManager\";\nimport Utils from \"../../utils/Utils\";\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('ObjectBase')\nexport class ObjectBase extends Component {\n    protected readonly defaultLineWidth: number = 2;\n    protected readonly defaultLineColor: Color = Color.BLACK;\n    protected readonly defaultFillColor: Color = Color.WHITE;\n\n    protected _objectType: ObjectType;\n    protected _localVertices: Vec2[];\n    protected _phyGroup: Phy_Group;\n    protected _isStatic: boolean;\n\n    protected _name: string;\n    protected _lineWidth: number;\n    protected _lineColor: Color;\n    protected _fillColor: Color;\n    protected _tipData: GameTipData[];\n\n    protected _graphics: Graphics;\n    protected _collider: PolygonCollider2D;\n    protected _rigidbody: RigidBody2D;\n\n    protected _curSpeed: Vec2;\n    protected _friction: number;\n\n    public create(): void {\n        this._graphics = this.node.getComponent(Graphics);\n        if (!this._graphics) {\n            this._graphics = this.node.addComponent(Graphics);\n        }\n        this._collider = this.node.getComponent(PolygonCollider2D);\n        if (!this._collider) {\n            this._collider = this.node.addComponent(PolygonCollider2D);\n        }\n        this._rigidbody = this.node.getComponent(RigidBody2D);\n        if (!this._rigidbody) {\n            this._rigidbody = this.node.addComponent(RigidBody2D);\n        }\n    }\n\n    public init(objectType: ObjectType, info: any, objectParam: ObjectParam, physicsParam: PhysicsParam) {\n        let vertices = info as Vec2[];\n        if (!vertices || vertices.length < 3) {\n            console.log(\"生成的物体的顶点数不能小于3\");\n            return;\n        }\n        if (!objectParam) {\n            return\n        }\n        this._graphics = this.node.getComponent(Graphics);\n        if (!this._graphics) {\n            this._graphics = this.node.addComponent(Graphics);\n        }\n        this._collider = this.node.getComponent(PolygonCollider2D);\n        if (!this._collider) {\n            this._collider = this.node.addComponent(PolygonCollider2D);\n        }\n        this._rigidbody = this.node.getComponent(RigidBody2D);\n        if (!this._rigidbody) {\n            this._rigidbody = this.node.addComponent(RigidBody2D);\n        }\n\n        this._objectType = objectType;\n        this._localVertices = vertices;\n        this._name = objectParam.name;\n        this._phyGroup = objectParam.phyGroup;\n        this._isStatic = objectParam.isStatic;\n        this._lineWidth = objectParam.lineWidth ? objectParam.lineWidth : this.defaultLineWidth;\n        this._lineColor = objectParam.lineColor ? objectParam.lineColor : this.defaultLineColor;\n        this._fillColor = objectParam.fillColor ? objectParam.fillColor : this.defaultFillColor;\n        this._tipData = [];\n\n        this.initPolygon();\n        this.initCollider();\n        this.initDynamic();\n        this.setFriction(physicsParam.friction);\n        this.reset();\n    }\n\n    protected initPolygon() {\n        this._graphics.lineWidth = this._lineWidth;\n        this._graphics.strokeColor = this._lineColor;\n        this._graphics.fillColor = this._fillColor;\n\n        let vertices = this._localVertices;\n        this._graphics.moveTo(vertices[0].x, vertices[0].y);\n        for (let i = 1; i < vertices.length; i++) {\n            this._graphics.lineTo(vertices[i].x, vertices[i].y);\n        }\n        this._graphics.close();\n        this._graphics.stroke();\n        this._graphics.fill();\n    }\n\n    protected initCollider() {\n        this._collider.points = this._localVertices;\n        if (this._phyGroup) {\n            this._collider.group = this._phyGroup;\n        }\n        else {\n            this._collider.group = Phy_Group.GAMEOBJECT;\n        }\n        this._collider.enabled = true;      // 激活碰撞体\n        this._collider.sensor = false;      // 不是触发器\n    }\n\n    protected initDynamic() {\n        if (this._phyGroup) {\n            this._rigidbody.group = this._phyGroup;\n        }\n        else {\n            this._rigidbody.group = Phy_Group.GAMEOBJECT;\n        }\n        if (this._isStatic) {\n            this._rigidbody.type = ERigidBody2DType.Static;\n        }\n        else {\n            this._rigidbody.type = ERigidBody2DType.Dynamic;\n        }\n    }\n\n    protected reset() {\n        this._curSpeed = Vec2.ZERO;\n        if (this._rigidbody) {\n            this._rigidbody.linearVelocity = this._curSpeed;\n        }\n    }\n\n    public setFriction(friction: number) {\n        if (this._collider) {\n            this._friction = friction;\n            this._collider.friction = this._friction;\n        }\n    }\n\n    public addForce(force: Vec2) {\n        if (this._rigidbody) {\n            this._rigidbody.applyForceToCenter(force, true);\n        }\n    }\n\n    public setTipData(data: GameTipData[]) {\n        this._tipData = data;\n    }\n\n    public getTipData(): GameTipData[] {\n        return this._tipData;\n    }\n\n    public getType(): ObjectType {\n        return this._objectType;\n    }\n\n    public getObjectParam(): ObjectParam {\n        return {\n            name: this._name,\n            lineWidth: this._lineWidth,\n            lineColor: this._lineColor,\n            fillColor: this._fillColor,\n        }\n    }\n\n    // 碰撞体内是否包含点\n    // https://blog.csdn.net/zsjzliziyang/article/details/108813349\n    public contains(pointPos: Vec2): boolean {\n        let crossings = 0;\n\n        let nodePos = this.node.getWorldPosition();\n        let vertices = [];\n        this._localVertices.forEach(vertex => {\n            let rotation: Vec3 = new Vec3();\n            this.node.rotation.getEulerAngles(rotation);\n            let angle = -Math.PI * rotation.z / 180;\n            let x = vertex.x * Math.cos(angle) + vertex.y * Math.sin(angle);\n            let y = -vertex.x * Math.sin(angle) + vertex.y * Math.cos(angle);\n            vertices.push(new Vec2(x + nodePos.x, y + nodePos.y));\n        })\n        for (let i = 0; i < vertices.length; i++) {\n            let curPos = vertices[i];\n            let nextPos = (i + 1 == vertices.length) ? vertices[0] : vertices[i + 1];\n            let slope = (nextPos.y - curPos.y) / (nextPos.x - curPos.x);\n            let cond1 = (curPos.x <= pointPos.x) && (nextPos.x > pointPos.x);\n            let cond2 = (nextPos.x <= pointPos.x) && (curPos.x > pointPos.x);\n            let above = (pointPos.y < slope * (pointPos.x - curPos.x) + curPos.y);\n            if ((cond1 || cond2) && above) {\n                crossings++;\n            }\n        }\n        return (crossings % 2 != 0);\n    }\n\n    public mouseOnObject(isMouseOn: boolean, param: MouseParam) {\n        this.addForce(v2(10, 0));\n    }\n\n    public pause() {\n        //LogManager.log(\"AAAAAAAAAA\", this._rigidbody.linearVelocity)\n        if (this._rigidbody) {\n            this._curSpeed = this._rigidbody.linearVelocity;\n            this._rigidbody.linearVelocity = Vec2.ZERO;\n        }\n    }\n\n    public resume() {\n        //LogManager.log(\"BBBBBBBBBB\", this._rigidbody.linearVelocity)\n        if (this._rigidbody) {\n            this._rigidbody.linearVelocity = this._curSpeed;\n        }\n    }\n\n\n}\n\nexport interface ObjectParam {\n    name: string,\n    phyGroup?: Phy_Group,\n    isStatic?: boolean,\n    lineWidth?: number,\n    lineColor?: Color,\n    fillColor?: Color,\n}\n\nexport interface PhysicsParam {\n    friction: number,\n}"]}