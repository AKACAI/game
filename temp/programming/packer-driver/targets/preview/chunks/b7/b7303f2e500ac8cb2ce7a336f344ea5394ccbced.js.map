{"version":3,"sources":["file:///D:/cocos_projects/physics_education_game/assets/scripts/manager/ui_manager/UIManager.ts"],"names":["_decorator","director","instantiate","Singleton","ResManager","LoadType","ConstStr","UIPanel","ResDestroyType","ccclass","property","UILayer","UIManager","init","layer2node","Map","openingPanel","mainCanvas","getScene","getChildByName","node_game_view","children","forEach","node","index","set","nextInitManager","console","log","setNextInitManager","getLayerNode","layer","get","openPanel","panelName","finishCb","params","has","panelPath","PanelPath","bundleName","split","panelPrefabPath","getInstance","loadBundle","loadAsset","PrefableRes","prefab","uIPanel","getComponent","parent","setPosition","open","getPanel","closePanel","close","resDestroyType","directlyRelease","releaseBundle","delayRelease"],"mappings":"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","sourcesContent":["import { _decorator, Vec3, director, instantiate, Node } from \"cc\";\nimport { Singleton } from \"../../common/Singleton\";\nimport { ResManager, LoadType } from \"../ResManager\";\nimport { ConstStr } from \"./Name2Panel\";\nimport { UIPanel, ResDestroyType } from \"./UIPanel\";\nimport { IPreInit } from \"../../common/IPreInit\";\n\nconst { ccclass, property } = _decorator;\n\nexport enum UILayer {\n    mouse_input = 0,\n    game,\n    menu,\n    screen,\n    alert,\n}\n\ninterface IOpenable {\n    position?: Vec3,\n}\n\n@ccclass('UIManager')\nexport class UIManager extends Singleton implements IPreInit {\n    private mainCanvas: Node;\n    private layer2node: Map<UILayer, Node>;\n    private openingPanel: Map<string, UIPanel>;\n    public init() {\n        this.layer2node = new Map();\n        this.openingPanel = new Map();\n        this.mainCanvas = director.getScene().getChildByName(\"main_canvas\");\n\n        let node_game_view = this.mainCanvas.getChildByName(\"node_ui_view\");\n        node_game_view.children.forEach((node, index) => {\n            this.layer2node.set(index, node);\n        });\n\n        if (this.nextInitManager) {\n            this.nextInitManager.init();\n        }\n        console.log(\"UIManager初始化完成!\");\n    }\n\n    public nextInitManager: IPreInit;\n    public setNextInitManager(nextInitManager: IPreInit): void {\n        this.nextInitManager = nextInitManager;\n    }\n    public getLayerNode(layer: UILayer): Node {\n        return this.layer2node.get(layer);\n    }\n\n    public openPanel(panelName: string, finishCb?: () => void, params?: IOpenable) {\n        if (!panelName) {\n            return;\n        }\n        if (this.openingPanel.has(panelName)) {\n            return;\n        }\n        let panelPath = ConstStr.PanelPath[panelName];\n        let bundleName = panelPath.split(\"/\")[0];\n        let panelPrefabPath = panelPath.split(\"/\")[1];\n        ResManager.getInstance().loadBundle(bundleName, () => {\n            ResManager.getInstance().loadAsset(panelPrefabPath, LoadType.PrefableRes, bundleName, (prefab) => {\n                console.log(\"成功打开Panel：\", panelName);\n                let node = instantiate(prefab);\n                let uIPanel: UIPanel = node.getComponent(UIPanel);\n                node.parent = this.getLayerNode(uIPanel.layer);\n                node.setPosition(0, 0, 0);\n                this.openingPanel.set(panelName, uIPanel);\n                uIPanel.panelName = panelName;\n                uIPanel.bundleName = bundleName;\n                uIPanel.init();\n                uIPanel.open();\n                finishCb?.();\n            });\n        });\n    }\n\n    public getPanel(panelName: string): UIPanel {\n        if (!panelName) {\n            return null;\n        }\n        if (!this.openingPanel.has(panelName)) {\n            return null;\n        }\n        let uIPanel = this.openingPanel.get(panelName);\n        return uIPanel;\n    }\n\n    public closePanel(panelName: string) {\n        if (!panelName) {\n            return;\n        }\n        if (!this.openingPanel.has(panelName)) {\n            return;\n        }\n        let uIPanel = this.openingPanel.get(panelName);\n        uIPanel.close();\n\n        if (uIPanel.resDestroyType == ResDestroyType.directlyRelease) {\n            let panelPath = ConstStr.PanelPath[panelName];\n            let bundleName = panelPath.split(\"/\")[0];\n            ResManager.getInstance().releaseBundle(bundleName);\n        }\n        else if (uIPanel.resDestroyType == ResDestroyType.delayRelease) {\n\n        }\n        else {\n\n        }\n    }\n}\n\n\n"]}