{"version":3,"sources":["file:///D:/cocos_projects/physics_education_game/assets/scripts/utils/Stack.ts"],"names":["Stack","constructor","_stack","push","val","pop","top","length","undefined","isEmpty","print","toString","str","curIndex","countCurDepth","j","console","log"],"mappings":";;;iBAAqBA,K;;;;;;;;;;;;;yBAAAA,K,GAAN,MAAMA,KAAN,CAA2B;AAG/BC,QAAAA,WAAW,GAAG;AACjB,eAAKC,MAAL,GAAc,EAAd;AACH;;AAEMC,QAAAA,IAAI,CAACC,GAAD,EAAS;AAChB,eAAKF,MAAL,CAAYC,IAAZ,CAAiBC,GAAjB;AACH;;AAEMC,QAAAA,GAAG,GAAM;AACZ,iBAAO,KAAKH,MAAL,CAAYG,GAAZ,EAAP;AACH;;AAEMC,QAAAA,GAAG,GAAM;AACZ,cAAI,KAAKJ,MAAL,CAAYK,MAAZ,IAAsB,CAA1B,EAA6B;AACzB,mBAAOC,SAAP;AACH;;AACD,iBAAO,KAAKN,MAAL,CAAY,KAAKA,MAAL,CAAYK,MAAZ,GAAqB,CAAjC,CAAP;AACH;;AAEgB,YAANA,MAAM,GAAW;AACxB,iBAAO,KAAKL,MAAL,CAAYK,MAAnB;AACH;;AAEME,QAAAA,OAAO,GAAY;AACtB,iBAAO,KAAKF,MAAL,IAAe,CAAtB;AACH,SA5BqC,CA8BtC;;;AACOG,QAAAA,KAAK,CAACC,QAAD,EAA6B;AACrC,cAAIA,QAAJ,EAAc;AACV,gBAAIC,GAAG,GAAG,EAAV;AACA,gBAAIC,QAAQ,GAAG,CAAf;AACA,gBAAIC,aAAa,GAAG,CAApB;;AACA,mBAAOD,QAAQ,GAAG,KAAKN,MAAvB,EAA+B;AAC3B,mBAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,aAAJ,IAAqBD,QAAQ,GAAG,KAAKN,MAArD,EAA6DQ,CAAC,EAA9D,EAAkE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,gBAAAA,GAAG,eAAQC,QAAR,oBAAqBF,QAAQ,CAAC,KAAKT,MAAL,CAAYW,QAAZ,CAAD,CAA7B,OAAH;AACAA,gBAAAA,QAAQ;AACX;;AACDD,cAAAA,GAAG,IAAI,IAAP;AACAE,cAAAA,aAAa,IAAI,CAAjB;AACH,aA1BS,CA2BV;;AACH,WA5BD,MA6BK;AACD,gBAAIF,IAAG,GAAG,EAAV;AACA,gBAAIC,SAAQ,GAAG,CAAf;AACA,gBAAIC,cAAa,GAAG,CAApB;;AACA,mBAAOD,SAAQ,GAAG,KAAKN,MAAvB,EAA+B;AAC3B,mBAAK,IAAIQ,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGD,cAAJ,IAAqBD,SAAQ,GAAG,KAAKN,MAArD,EAA6DQ,EAAC,EAA9D,EAAkE;AAC9DH,gBAAAA,IAAG,eAAQC,SAAR,oBAAqB,KAAKX,MAAL,CAAYW,SAAZ,CAArB,OAAH;AACAA,gBAAAA,SAAQ;AACX;;AACDD,cAAAA,IAAG,IAAI,IAAP;AACAE,cAAAA,cAAa,IAAI,CAAjB;AACH;;AACDE,YAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACH;AACJ;;AA3EqC,O","sourcesContent":["export default class Stack<T extends any> {\r\n    private _stack: T[];\r\n\r\n    public constructor() {\r\n        this._stack = [];\r\n    }\r\n\r\n    public push(val: T) {\r\n        this._stack.push(val);\r\n    }\r\n\r\n    public pop(): T {\r\n        return this._stack.pop();\r\n    }\r\n\r\n    public top(): T {\r\n        if (this._stack.length <= 0) {\r\n            return undefined;\r\n        }\r\n        return this._stack[this._stack.length - 1];\r\n    }\r\n\r\n    public get length(): number {\r\n        return this._stack.length;\r\n    }\r\n\r\n    public isEmpty(): boolean {\r\n        return this.length == 0;\r\n    }\r\n\r\n    // 怎么打印泛型对象的内容呢？\r\n    public print(toString: (a: T) => string) {\r\n        if (toString) {\r\n            let str = \"\";\r\n            let curIndex = 0;\r\n            let countCurDepth = 1;\r\n            while (curIndex < this.length) {\r\n                for (let j = 0; j < countCurDepth && curIndex < this.length; j++) {\r\n                    // let parent = Math.floor((curIndex - 1) / 2);\r\n                    // if (parent >= 0) {\r\n                    //     if (this._compare(this._queue[curIndex], this._queue[parent]) == 1) {\r\n                    //         DebugTool.log(`第${curIndex}项：${toString(this._queue[curIndex])}\\t`, Color.GREEN);\r\n                    //     }\r\n                    //     else if (this._compare(this._queue[curIndex], this._queue[parent]) == 0) {\r\n                    //         DebugTool.log(`第${curIndex}项：${toString(this._queue[curIndex])}\\t`, Color.YELLOW);\r\n                    //     }\r\n                    //     else {\r\n                    //         DebugTool.log(`第${curIndex}项：${toString(this._queue[curIndex])}\\t`, Color.RED);\r\n                    //     }\r\n                    // }\r\n                    // else {\r\n                    //     DebugTool.log(`第${curIndex}项：${toString(this._queue[curIndex])}\\t`, Color.BLACK);\r\n                    // }\r\n                    str += `第${curIndex}项：${toString(this._stack[curIndex])}\\t`;\r\n                    curIndex++;\r\n                }\r\n                str += \"\\n\";\r\n                countCurDepth *= 2;\r\n            }\r\n            //console.log(str);\r\n        }\r\n        else {\r\n            let str = \"\";\r\n            let curIndex = 0;\r\n            let countCurDepth = 1;\r\n            while (curIndex < this.length) {\r\n                for (let j = 0; j < countCurDepth && curIndex < this.length; j++) {\r\n                    str += `第${curIndex}项：${this._stack[curIndex]}\\t`;\r\n                    curIndex++;\r\n                }\r\n                str += \"\\n\";\r\n                countCurDepth *= 2;\r\n            }\r\n            console.log(str);\r\n        }\r\n    }\r\n}"]}