{"version":3,"sources":["file:///D:/cocos_projects/physics_education_game/assets/scripts/manager/ResManager.ts"],"names":["ResManager","LoadHelper","assetManager","error","Prefab","SpriteFrame","SpriteAtlas","sp","TTFFont","ParticleAsset","Font","JsonAsset","Material","Texture2D","TextureCube","AnimationClip","Mesh","Singleton","name2Bundle","undefined","init","Map","nextInitManager","setNextInitManager","loadBundle","bundleName","successCb","target","has","bundle","apply","console","log","err","releaseBundle","delete","loadAsset","path","type","failCb","loadTask","resPath","resType","getBundle","releaseAll","removeBundle","params","LoadType","PrefableRes","NormalImg","PLIST","SPINE","SkeletonData","TTFONT","PARTICLE","FONT","JSON","Texture","MESH","loadAny","priority","level","asset","CustomType2assetTypeDic"],"mappings":"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","sourcesContent":["import { AssetManager, assetManager, error, Prefab, SpriteFrame, SpriteAtlas, sp, TTFFont, ParticleAsset, Font, JsonAsset, Material, Texture2D, TextureCube, AnimationClip, Mesh, Asset } from \"cc\";\r\nimport { Singleton } from \"../common/Singleton\";\r\nimport { IPreInit } from \"../common/IPreInit\";\r\n\r\nexport class ResManager extends Singleton implements IPreInit {\r\n    // TODO 缓存管理\r\n    private name2Bundle: Map<string, AssetManager.Bundle> = undefined;\r\n\r\n    public init() {\r\n        this.name2Bundle = new Map;\r\n        if (this.nextInitManager) {\r\n            this.nextInitManager.init();\r\n        }\r\n    }\r\n\r\n    public nextInitManager: IPreInit;\r\n    public setNextInitManager(nextInitManager: IPreInit): void {\r\n        this.nextInitManager = nextInitManager;\r\n    }\r\n\r\n    loadBundle(bundleName: string, successCb?: (bundle?) => void, target?) {\r\n        if (this.name2Bundle.has(bundleName)) {\r\n            let bundle = this.name2Bundle[bundleName];\r\n            if (successCb) {\r\n                successCb.apply(target, [bundle, target]);\r\n            }\r\n            return;\r\n        }\r\n\r\n        LoadHelper.loadBundle(bundleName, (bundle) => {\r\n            if (bundle) {\r\n                this.name2Bundle[bundleName] = bundle;\r\n                if (successCb) {\r\n                    console.log(\"成功加载bundle包：\", bundleName);\r\n                    successCb.apply(target, [bundle, target]);\r\n                }\r\n            }\r\n        }, (err) => {\r\n            console.log(\"加载bundle失败，bundle名为：\", bundleName);\r\n        }, this);\r\n    }\r\n\r\n    releaseBundle(bundleName: string) {\r\n        this.name2Bundle.delete(bundleName);\r\n        LoadHelper.releaseBundle(bundleName);\r\n    }\r\n\r\n    /**资源加载*/\r\n    loadAsset(path: string, type: LoadType, bundleName: string, successCb?: (asset: any) => void, failCb?: (err?: Error | string) => void, target?) {\r\n        // if (!this.name2Bundle.has(bundleName)) {\r\n        //     console.error(`bundle包未加载,加载的资源路径为：${path},bandle包为:${bundleName}`);\r\n        //     return;\r\n        // }\r\n\r\n        let loadTask: LoadTaskParam = {\r\n            resPath: path,\r\n            resType: type,\r\n            bundleName: bundleName,\r\n            failCb: failCb,\r\n            successCb: successCb,\r\n            target: target,\r\n        };\r\n        LoadHelper.loadAsset(loadTask);\r\n    }\r\n}\r\n\r\nclass LoadHelper {\r\n    static loadBundle(bundleName: string, successCb?: (bundle) => void, failCb?: (err) => void, target?) {\r\n        assetManager.loadBundle(bundleName, (err, bundle) => {\r\n            if (err) {\r\n                if (failCb) {\r\n                    failCb.apply(target, [err, target])\r\n                }\r\n            }\r\n            else {\r\n                if (successCb) {\r\n                    successCb.apply(target, [bundle, target])\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    static releaseBundle(bundleName: string) {\r\n        let bundle = assetManager.getBundle(bundleName);\r\n        bundle.releaseAll();\r\n        assetManager.removeBundle(bundle);\r\n    }\r\n\r\n    static loadAsset(params: LoadTaskParam) {\r\n        if (params.resPath == null || params.resPath == \"\") {\r\n            error(\"load path is empty\");\r\n            return;\r\n        }\r\n        // 直接介入\r\n        let resType: any\r\n        switch (params.resType) {\r\n            case LoadType.PrefableRes: resType = Prefab; break;\r\n            case LoadType.NormalImg: resType = SpriteFrame; break;\r\n            case LoadType.PLIST: resType = SpriteAtlas; break;\r\n            case LoadType.SPINE: resType = sp.SkeletonData; break;\r\n            case LoadType.TTFONT: resType = TTFFont; break;\r\n            case LoadType.PARTICLE: resType = ParticleAsset; break;\r\n            case LoadType.FONT: resType = Font; break;\r\n            case LoadType.JSON: resType = JsonAsset; break;\r\n            case LoadType.Material: resType = Material; break;\r\n            case LoadType.Texture: resType = Texture2D; break;\r\n            case LoadType.TextureCube: resType = TextureCube; break;\r\n            case LoadType.AnimationClip: resType = AnimationClip; break;\r\n            case LoadType.MESH: resType = Mesh; break;\r\n        }\r\n        if (!resType) {\r\n            console.error(\"未知的加载类型\", resType)\r\n            return\r\n        }\r\n\r\n        assetManager.loadAny({ path: params.resPath, type: resType, bundle: params.bundleName }, { priority: params.level },\r\n            (err: any, asset: Asset) => {\r\n                if (err) {\r\n                    if (params.failCb) {\r\n                        params.failCb.apply(params.target, [err, params.target])\r\n                    }\r\n                }\r\n                else {\r\n                    console.log(\"成功加载asset：\", params.resPath);\r\n                    if (params.successCb) {\r\n                        params.successCb.apply(params.target, [asset, params.target])\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\n\r\n/**自定义类型到资源类型的转换 */\r\nexport const CustomType2assetTypeDic: { [type: number]: any } = {\r\n    1: Prefab,\r\n    2: SpriteFrame,\r\n    3: SpriteAtlas,\r\n    4: sp.SkeletonData,\r\n    5: TTFFont,\r\n    6: ParticleAsset,\r\n    7: Font,\r\n    8: JsonAsset,\r\n    9: Material,\r\n    10: Texture2D,\r\n    11: TextureCube,\r\n    12: AnimationClip,\r\n    13: Mesh\r\n}\r\n\r\n/**加载资源类型 */\r\nexport enum LoadType {\r\n    PrefableRes = 1,\r\n    NormalImg = 2,\r\n    PLIST = 3,\r\n    SPINE = 4,\r\n    TTFONT = 5,\r\n    PARTICLE = 6,\r\n    FONT = 7,\r\n    JSON = 8,\r\n    Material = 9,\r\n    Texture = 10,\r\n    TextureCube = 11,\r\n    AnimationClip = 12,\r\n    MESH = 13,\r\n}\r\n\r\ninterface LoadTaskParam {\r\n    /** 要加载的资源类型 */\r\n    resType: LoadType,\r\n    /** 资源路径 */\r\n    resPath: string\r\n    /** bundle名 */\r\n    bundleName: string\r\n    /** 实例 */\r\n    target?: any\r\n    /** 优先级 数值越大越优先 */\r\n    level?: number\r\n\r\n    /** 加载成功回调 */\r\n    successCb?: (asset: any) => void\r\n    /** 加载失败回调 */\r\n    failCb?: (err?: Error | string) => void\r\n    /** 加载完成回调 */\r\n    finishCb?: (err?: Error | string, asset?: any) => void\r\n}\r\n"]}