{"version":3,"sources":["file:///E:/education_game/game/assets/scripts/modules/game/ObjectBase.ts"],"names":["_decorator","Component","Color","Vec2","Graphics","PolygonCollider2D","RigidBody2D","ERigidBody2DType","Vec3","v2","Phy_Group","InteractSpace","ccclass","property","ObjectBase","defaultForceFrom","defaultLineWidth","defaultLineColor","BLACK","defaultFillColor","WHITE","_markForceId","create","_graphics","node","getComponent","addComponent","_collider","_rigidbody","_interactSpace","setObject","objectId","objectType","shapeParam","objectParam","physicsParam","_objectInfo","id","name","type","vertices","length","console","log","lineWidth","lineColor","fillColor","initPolygon","initCollider","phyGroup","initDynamic","isStatic","reset","data","strokeColor","_localVertices","moveTo","x","y","i","lineTo","close","stroke","fill","points","group","GAMEOBJECT","enabled","sensor","friction","Static","Dynamic","_curSpeed","ZERO","_curForce","linearVelocity","addForce","force","from","push","removeForce","getForce","applyForce","forceItem","applyForceToCenter","setSpeed","speed","setTipData","tipData","getObjectInfo","getLocalVertices","contains","pointPos","crossings","nodePos","getWorldPosition","forEach","vertex","rotation","getEulerAngles","angle","Math","PI","z","cos","sin","curPos","nextPos","slope","cond1","cond2","above","onMouseEnterSpace","param","onMouseLeaveSpace","pause","resume","ForceType","ObjectVisualTag"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,Q,OAAAA,Q;AAAUC,MAAAA,iB,OAAAA,iB;AAAmBC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,gB,OAAAA,gB;AAAkBC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,E,OAAAA,E;;AACtGC,MAAAA,S,iBAAAA,S;;AAIAC,MAAAA,a,iBAAAA,a;;;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBb,U;;4BAGjBc,U,WADZF,OAAO,CAAC,YAAD,C,gBAAR,MACaE,UADb,SACgCb,SADhC,CAC0C;AAAA;AAAA;AAAA,eACnBc,gBADmB,GACQ,MADR;AAAA,eAEnBC,gBAFmB,GAEQ,CAFR;AAAA,eAGnBC,gBAHmB,GAGOf,KAAK,CAACgB,KAHb;AAAA,eAInBC,gBAJmB,GAIOjB,KAAK,CAACkB,KAJb;AAAA,eAe9BC,YAf8B,GAeP,CAfO;AAAA;;AAiBtC;;AAEA;AAGOC,QAAAA,MAAM,GAAS;AAClB,eAAKC,SAAL,GAAiB,KAAKC,IAAL,CAAUC,YAAV,CAAuBrB,QAAvB,CAAjB;;AACA,cAAI,CAAC,KAAKmB,SAAV,EAAqB;AACjB,iBAAKA,SAAL,GAAiB,KAAKC,IAAL,CAAUE,YAAV,CAAuBtB,QAAvB,CAAjB;AACH;;AACD,eAAKuB,SAAL,GAAiB,KAAKH,IAAL,CAAUC,YAAV,CAAuBpB,iBAAvB,CAAjB;;AACA,cAAI,CAAC,KAAKsB,SAAV,EAAqB;AACjB,iBAAKA,SAAL,GAAiB,KAAKH,IAAL,CAAUE,YAAV,CAAuBrB,iBAAvB,CAAjB;AACH;;AACD,eAAKuB,UAAL,GAAkB,KAAKJ,IAAL,CAAUC,YAAV,CAAuBnB,WAAvB,CAAlB;;AACA,cAAI,CAAC,KAAKsB,UAAV,EAAsB;AAClB,iBAAKA,UAAL,GAAkB,KAAKJ,IAAL,CAAUE,YAAV,CAAuBpB,WAAvB,CAAlB;AACH;;AACD,eAAKuB,cAAL,GAAsB;AAAA;AAAA,+CAAtB;AACH;;AAEMC,QAAAA,SAAS,CAACC,QAAD,EAAmBC,UAAnB,EAA2CC,UAA3C,EAA4DC,WAA5D,EAAsFC,YAAtF,EAAkH;AAC9H,eAAKC,WAAL,GAAmB;AACfC,YAAAA,EAAE,EAAEN,QADW;AAEfO,YAAAA,IAAI,EAAEJ,WAAW,CAACI,IAFH;AAGfC,YAAAA,IAAI,EAAEP;AAHS,WAAnB;AAKA,gBAAMQ,QAAQ,GAAGP,UAAjB;;AACA,cAAI,CAACO,QAAD,IAAaA,QAAQ,CAACC,MAAT,GAAkB,CAAnC,EAAsC;AAClCC,YAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA;AACH;;AACD,cAAI,CAACT,WAAL,EAAkB;AACd;AACH;;AAED,cAAIU,SAAS,GAAGV,WAAW,CAACU,SAAZ,GAAwBV,WAAW,CAACU,SAApC,GAAgD,KAAK5B,gBAArE;AACA,cAAI6B,SAAS,GAAGX,WAAW,CAACW,SAAZ,GAAwBX,WAAW,CAACW,SAApC,GAAgD,KAAK5B,gBAArE;AACA,cAAI6B,SAAS,GAAGZ,WAAW,CAACY,SAAZ,GAAwBZ,WAAW,CAACY,SAApC,GAAgD,KAAK3B,gBAArE;AACA,eAAK4B,WAAL,CAAiB;AAAEH,YAAAA,SAAS,EAAEA,SAAb;AAAwBC,YAAAA,SAAS,EAAEA,SAAnC;AAA8CC,YAAAA,SAAS,EAAEA,SAAzD;AAAoEN,YAAAA,QAAQ,EAAEA;AAA9E,WAAjB;AACA,eAAKQ,YAAL,CAAkB;AAAEC,YAAAA,QAAQ,EAAEf,WAAW,CAACe,QAAxB;AAAkCd,YAAAA,YAAY,EAAEA;AAAhD,WAAlB;AACA,eAAKe,WAAL,CAAiB;AAAED,YAAAA,QAAQ,EAAEf,WAAW,CAACe,QAAxB;AAAkCE,YAAAA,QAAQ,EAAEjB,WAAW,CAACiB;AAAxD,WAAjB;AACA,eAAKC,KAAL;AACH;;AAESL,QAAAA,WAAW,CAACM,IAAD,EAAoF;AACrG,eAAK9B,SAAL,CAAeqB,SAAf,GAA2BS,IAAI,CAACT,SAAhC;AACA,eAAKrB,SAAL,CAAe+B,WAAf,GAA6BD,IAAI,CAACR,SAAlC;AACA,eAAKtB,SAAL,CAAeuB,SAAf,GAA2BO,IAAI,CAACP,SAAhC;AAEA,eAAKS,cAAL,GAAsBF,IAAI,CAACb,QAA3B;;AACA,eAAKjB,SAAL,CAAeiC,MAAf,CAAsB,KAAKD,cAAL,CAAoB,CAApB,EAAuBE,CAA7C,EAAgD,KAAKF,cAAL,CAAoB,CAApB,EAAuBG,CAAvE;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,cAAL,CAAoBd,MAAxC,EAAgDkB,CAAC,EAAjD,EAAqD;AACjD,iBAAKpC,SAAL,CAAeqC,MAAf,CAAsB,KAAKL,cAAL,CAAoBI,CAApB,EAAuBF,CAA7C,EAAgD,KAAKF,cAAL,CAAoBI,CAApB,EAAuBD,CAAvE;AACH;;AACD,eAAKnC,SAAL,CAAesC,KAAf;;AACA,eAAKtC,SAAL,CAAeuC,MAAf;;AACA,eAAKvC,SAAL,CAAewC,IAAf;AAEH;;AAESf,QAAAA,YAAY,CAACK,IAAD,EAA4D;AAC9E,eAAK1B,SAAL,CAAeqC,MAAf,GAAwB,KAAKT,cAA7B;AACA,eAAK5B,SAAL,CAAesC,KAAf,GAAuBZ,IAAI,CAACJ,QAAL,GAAgBI,IAAI,CAACJ,QAArB,GAAgC;AAAA;AAAA,sCAAUiB,UAAjE;AACA,eAAKvC,SAAL,CAAewC,OAAf,GAAyB,IAAzB,CAH8E,CAG1C;;AACpC,eAAKxC,SAAL,CAAeyC,MAAf,GAAwB,KAAxB,CAJ8E,CAI1C;;AACpC,eAAKzC,SAAL,CAAe0C,QAAf,GAA0BhB,IAAI,CAAClB,YAAL,CAAkBkC,QAA5C;AACH;;AAESnB,QAAAA,WAAW,CAACG,IAAD,EAAmD;AACpE,eAAKzB,UAAL,CAAgBqC,KAAhB,GAAwBZ,IAAI,CAACJ,QAAL,GAAgBI,IAAI,CAACJ,QAArB,GAAgC;AAAA;AAAA,sCAAUiB,UAAlE;AACA,eAAKtC,UAAL,CAAgBW,IAAhB,GAAuBc,IAAI,CAACF,QAAL,GAAgB5C,gBAAgB,CAAC+D,MAAjC,GAA0C/D,gBAAgB,CAACgE,OAAlF;AACH;;AAESnB,QAAAA,KAAK,GAAG;AACd,eAAKoB,SAAL,GAAiBrE,IAAI,CAACsE,IAAtB;AACA,eAAKC,SAAL,GAAiB,EAAjB;;AACA,cAAI,KAAK9C,UAAT,EAAqB;AACjB,iBAAKA,UAAL,CAAgB+C,cAAhB,GAAiC,KAAKH,SAAtC;AACH;AAEJ;AAED;;;AACOI,QAAAA,QAAQ,CAACC,KAAD,EAActC,IAAd,EAAgCuC,IAAY,GAAG,KAAK/D,gBAApD,EAAsE;AACjF,cAAI,CAAC,KAAKa,UAAV,EAAsB;AAClB;AACH;;AACD,cAAI,CAAC,KAAK8C,SAAV,EAAqB;AACjB,iBAAKA,SAAL,GAAiB,EAAjB;AACH;;AACD,cAAI,CAAC,KAAKA,SAAL,CAAeI,IAAf,CAAL,EAA2B;AACvB,iBAAKJ,SAAL,CAAeI,IAAf,IAAuB,EAAvB;AACH;;AACD,cAAIzC,EAAE,GAAG,EAAE,KAAKhB,YAAhB;;AACA,eAAKqD,SAAL,CAAeI,IAAf,EAAqBC,IAArB,CAA0B;AAAE1C,YAAAA,EAAE,EAAEA,EAAN;AAAUE,YAAAA,IAAI,EAAEA,IAAhB;AAAsBsC,YAAAA,KAAK,EAAEA;AAA7B,WAA1B;AACH;;AAEMG,QAAAA,WAAW,CAACH,KAAD,EAActC,IAAd,EAAgCuC,IAAY,GAAG,KAAK/D,gBAApD,EAAsE,CAEvF;;AAEMkE,QAAAA,QAAQ,GAAG;AACd,iBAAO,KAAKP,SAAZ;AACH;AAED;;;AACOQ,QAAAA,UAAU,GAAG;AAChB,eAAK,MAAMJ,IAAX,IAAmB,KAAKJ,SAAxB,EAAmC;AAC/B,iBAAK,MAAMS,SAAX,IAAwB,KAAKT,SAAL,CAAeI,IAAf,CAAxB,EAA8C;AAC1C,mBAAKlD,UAAL,CAAgBwD,kBAAhB,CAAmCD,SAAS,CAACN,KAA7C,EAAoD,IAApD;AACH;AACJ;AACJ;AAED;;;AACOQ,QAAAA,QAAQ,CAACC,KAAD,EAAc;AACzB,cAAI,CAAC,KAAK1D,UAAV,EAAsB;AAClB;AACH;;AACD,eAAKA,UAAL,CAAgB+C,cAAhB,GAAiCW,KAAjC;AACH;;AAEMC,QAAAA,UAAU,CAAClC,IAAD,EAAsB;AACnC,eAAKjB,WAAL,CAAiBoD,OAAjB,GAA2BnC,IAA3B;AACH;;AAEMoC,QAAAA,aAAa,GAAe;AAC/B,iBAAO,KAAKrD,WAAZ;AACH;;AAEMsD,QAAAA,gBAAgB,GAAW;AAC9B,iBAAO,KAAKnC,cAAZ;AACH,SAtJqC,CAwJtC;AACA;;;AACOoC,QAAAA,QAAQ,CAACC,QAAD,EAA0B;AACrC,cAAIC,SAAS,GAAG,CAAhB;AAEA,cAAIC,OAAO,GAAG,KAAKtE,IAAL,CAAUuE,gBAAV,EAAd;AACA,cAAIvD,QAAQ,GAAG,EAAf;;AACA,eAAKe,cAAL,CAAoByC,OAApB,CAA4BC,MAAM,IAAI;AAClC,gBAAIC,QAAc,GAAG,IAAI1F,IAAJ,EAArB;AACA,iBAAKgB,IAAL,CAAU0E,QAAV,CAAmBC,cAAnB,CAAkCD,QAAlC;AACA,gBAAIE,KAAK,GAAG,CAACC,IAAI,CAACC,EAAN,GAAWJ,QAAQ,CAACK,CAApB,GAAwB,GAApC;AACA,gBAAI9C,CAAC,GAAGwC,MAAM,CAACxC,CAAP,GAAW4C,IAAI,CAACG,GAAL,CAASJ,KAAT,CAAX,GAA6BH,MAAM,CAACvC,CAAP,GAAW2C,IAAI,CAACI,GAAL,CAASL,KAAT,CAAhD;AACA,gBAAI1C,CAAC,GAAG,CAACuC,MAAM,CAACxC,CAAR,GAAY4C,IAAI,CAACI,GAAL,CAASL,KAAT,CAAZ,GAA8BH,MAAM,CAACvC,CAAP,GAAW2C,IAAI,CAACG,GAAL,CAASJ,KAAT,CAAjD;AACA5D,YAAAA,QAAQ,CAACuC,IAAT,CAAc,IAAI5E,IAAJ,CAASsD,CAAC,GAAGqC,OAAO,CAACrC,CAArB,EAAwBC,CAAC,GAAGoC,OAAO,CAACpC,CAApC,CAAd;AACH,WAPD;;AAQA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,QAAQ,CAACC,MAA7B,EAAqCkB,CAAC,EAAtC,EAA0C;AACtC,gBAAI+C,MAAM,GAAGlE,QAAQ,CAACmB,CAAD,CAArB;AACA,gBAAIgD,OAAO,GAAIhD,CAAC,GAAG,CAAJ,IAASnB,QAAQ,CAACC,MAAnB,GAA6BD,QAAQ,CAAC,CAAD,CAArC,GAA2CA,QAAQ,CAACmB,CAAC,GAAG,CAAL,CAAjE;AACA,gBAAIiD,KAAK,GAAG,CAACD,OAAO,CAACjD,CAAR,GAAYgD,MAAM,CAAChD,CAApB,KAA0BiD,OAAO,CAAClD,CAAR,GAAYiD,MAAM,CAACjD,CAA7C,CAAZ;AACA,gBAAIoD,KAAK,GAAIH,MAAM,CAACjD,CAAP,IAAYmC,QAAQ,CAACnC,CAAtB,IAA6BkD,OAAO,CAAClD,CAAR,GAAYmC,QAAQ,CAACnC,CAA9D;AACA,gBAAIqD,KAAK,GAAIH,OAAO,CAAClD,CAAR,IAAamC,QAAQ,CAACnC,CAAvB,IAA8BiD,MAAM,CAACjD,CAAP,GAAWmC,QAAQ,CAACnC,CAA9D;AACA,gBAAIsD,KAAK,GAAInB,QAAQ,CAAClC,CAAT,GAAakD,KAAK,IAAIhB,QAAQ,CAACnC,CAAT,GAAaiD,MAAM,CAACjD,CAAxB,CAAL,GAAkCiD,MAAM,CAAChD,CAAnE;;AACA,gBAAI,CAACmD,KAAK,IAAIC,KAAV,KAAoBC,KAAxB,EAA+B;AAC3BlB,cAAAA,SAAS;AACZ;AACJ;;AACD,iBAAQA,SAAS,GAAG,CAAZ,IAAiB,CAAzB;AACH;;AAEMmB,QAAAA,iBAAiB,CAACC,KAAD,EAAoB;AACxC,eAAKrC,QAAL,CAAcnE,EAAE,CAAC,EAAD,EAAK,CAAL,CAAhB;AACH;;AAEMyG,QAAAA,iBAAiB,CAACD,KAAD,EAAoB;AACxC,eAAKrC,QAAL,CAAcnE,EAAE,CAAC,EAAD,EAAK,CAAL,CAAhB;AACH;;AAEM0G,QAAAA,KAAK,GAAG;AACX;AACA,cAAI,KAAKvF,UAAT,EAAqB;AACjB,iBAAK4C,SAAL,GAAiB,KAAK5C,UAAL,CAAgB+C,cAAjC;AACA,iBAAK/C,UAAL,CAAgB+C,cAAhB,GAAiCxE,IAAI,CAACsE,IAAtC;AACH;AACJ;;AAEM2C,QAAAA,MAAM,GAAG;AACZ;AACA,cAAI,KAAKxF,UAAT,EAAqB;AACjB,iBAAKA,UAAL,CAAgB+C,cAAhB,GAAiC,KAAKH,SAAtC;AACH;AACJ;;AA1MqC,O;;2BA0N9B6C,S,0BAAAA,S;AAAAA,QAAAA,S,CAAAA,S;AAAAA,QAAAA,S,CAAAA,S;AAAAA,QAAAA,S,CAAAA,S;eAAAA,S;;;iCASAC,e,0BAAAA,e;AAAAA,QAAAA,e,CAAAA,e;AAAAA,QAAAA,e,CAAAA,e;AAAAA,QAAAA,e,CAAAA,e;eAAAA,e","sourcesContent":["import { _decorator, Component, Color, Vec2, Graphics, PolygonCollider2D, RigidBody2D, ERigidBody2DType, Vec3, v2 } from \"cc\";\nimport { Phy_Group } from \"../../manager/game_manager/GameDefinition\";\nimport { MouseParam } from \"../../manager/game_manager/GameManager\";\nimport { GameTipData } from \"../ui/game_tip/GameTipItem\";\nimport { ObjectType } from \"./ObjectFactory\";\nimport { InteractSpace } from \"../../manager/game_manager/InteractSpace\";\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('ObjectBase')\nexport class ObjectBase extends Component {\n    protected readonly defaultForceFrom: string = \"from\";\n    protected readonly defaultLineWidth: number = 2;\n    protected readonly defaultLineColor: Color = Color.BLACK;\n    protected readonly defaultFillColor: Color = Color.WHITE;\n\n    protected _localVertices: Vec2[];\n\n    protected _objectInfo: ObjectInfo;\n\n    protected _graphics: Graphics;\n    protected _collider: PolygonCollider2D;\n    protected _rigidbody: RigidBody2D;\n    protected _interactSpace: InteractSpace;\n\n    private _markForceId: number = 0;\n\n    /**当前速度 */\n    protected _curSpeed: Vec2;\n    /**当前受力 */\n    protected _curForce: { [id: number]: { from: string, force: Vec2, type: ForceType }[] };\n\n    public create(): void {\n        this._graphics = this.node.getComponent(Graphics);\n        if (!this._graphics) {\n            this._graphics = this.node.addComponent(Graphics);\n        }\n        this._collider = this.node.getComponent(PolygonCollider2D);\n        if (!this._collider) {\n            this._collider = this.node.addComponent(PolygonCollider2D);\n        }\n        this._rigidbody = this.node.getComponent(RigidBody2D);\n        if (!this._rigidbody) {\n            this._rigidbody = this.node.addComponent(RigidBody2D);\n        }\n        this._interactSpace = new InteractSpace();\n    }\n\n    public setObject(objectId: number, objectType: ObjectType, shapeParam: any, objectParam: ObjectParam, physicsParam: PhysicsParam) {\n        this._objectInfo = {\n            id: objectId,\n            name: objectParam.name,\n            type: objectType,\n        };\n        const vertices = shapeParam as Vec2[];\n        if (!vertices || vertices.length < 3) {\n            console.log(\"生成的物体的顶点数不能小于3\");\n            return;\n        }\n        if (!objectParam) {\n            return;\n        }\n\n        let lineWidth = objectParam.lineWidth ? objectParam.lineWidth : this.defaultLineWidth;\n        let lineColor = objectParam.lineColor ? objectParam.lineColor : this.defaultLineColor;\n        let fillColor = objectParam.fillColor ? objectParam.fillColor : this.defaultFillColor;\n        this.initPolygon({ lineWidth: lineWidth, lineColor: lineColor, fillColor: fillColor, vertices: vertices });\n        this.initCollider({ phyGroup: objectParam.phyGroup, physicsParam: physicsParam });\n        this.initDynamic({ phyGroup: objectParam.phyGroup, isStatic: objectParam.isStatic });\n        this.reset();\n    }\n\n    protected initPolygon(data: { lineWidth: number, lineColor: Color, fillColor: Color, vertices: Vec2[] }) {\n        this._graphics.lineWidth = data.lineWidth;\n        this._graphics.strokeColor = data.lineColor;\n        this._graphics.fillColor = data.fillColor;\n\n        this._localVertices = data.vertices;\n        this._graphics.moveTo(this._localVertices[0].x, this._localVertices[0].y);\n        for (let i = 1; i < this._localVertices.length; i++) {\n            this._graphics.lineTo(this._localVertices[i].x, this._localVertices[i].y);\n        }\n        this._graphics.close();\n        this._graphics.stroke();\n        this._graphics.fill();\n\n    }\n\n    protected initCollider(data: { phyGroup: Phy_Group, physicsParam: PhysicsParam }) {\n        this._collider.points = this._localVertices;\n        this._collider.group = data.phyGroup ? data.phyGroup : Phy_Group.GAMEOBJECT;\n        this._collider.enabled = true;      // 激活碰撞体\n        this._collider.sensor = false;      // 不是触发器\n        this._collider.friction = data.physicsParam.friction;\n    }\n\n    protected initDynamic(data: { phyGroup: Phy_Group, isStatic: boolean }) {\n        this._rigidbody.group = data.phyGroup ? data.phyGroup : Phy_Group.GAMEOBJECT;\n        this._rigidbody.type = data.isStatic ? ERigidBody2DType.Static : ERigidBody2DType.Dynamic;\n    }\n\n    protected reset() {\n        this._curSpeed = Vec2.ZERO;\n        this._curForce = {};\n        if (this._rigidbody) {\n            this._rigidbody.linearVelocity = this._curSpeed;\n        }\n\n    }\n\n    /** 增加受力 */\n    public addForce(force: Vec2, type?: ForceType, from: string = this.defaultForceFrom) {\n        if (!this._rigidbody) {\n            return;\n        }\n        if (!this._curForce) {\n            this._curForce = {};\n        }\n        if (!this._curForce[from]) {\n            this._curForce[from] = [];\n        }\n        let id = ++this._markForceId;\n        this._curForce[from].push({ id: id, type: type, force: force });\n    }\n\n    public removeForce(force: Vec2, type?: ForceType, from: string = this.defaultForceFrom) {\n\n    }\n\n    public getForce() {\n        return this._curForce;\n    }\n\n    /**对该物体运用身上受到的力 */\n    public applyForce() {\n        for (const from in this._curForce) {\n            for (const forceItem of this._curForce[from]) {\n                this._rigidbody.applyForceToCenter(forceItem.force, true);\n            }\n        }\n    }\n\n    /** 设置速度 */\n    public setSpeed(speed: Vec2) {\n        if (!this._rigidbody) {\n            return;\n        }\n        this._rigidbody.linearVelocity = speed;\n    }\n\n    public setTipData(data: GameTipData[]) {\n        this._objectInfo.tipData = data;\n    }\n\n    public getObjectInfo(): ObjectInfo {\n        return this._objectInfo;\n    }\n\n    public getLocalVertices(): Vec2[] {\n        return this._localVertices;\n    }\n\n    // 碰撞体内是否包含点\n    // https://blog.csdn.net/zsjzliziyang/article/details/108813349\n    public contains(pointPos: Vec2): boolean {\n        let crossings = 0;\n\n        let nodePos = this.node.getWorldPosition();\n        let vertices = [];\n        this._localVertices.forEach(vertex => {\n            let rotation: Vec3 = new Vec3();\n            this.node.rotation.getEulerAngles(rotation);\n            let angle = -Math.PI * rotation.z / 180;\n            let x = vertex.x * Math.cos(angle) + vertex.y * Math.sin(angle);\n            let y = -vertex.x * Math.sin(angle) + vertex.y * Math.cos(angle);\n            vertices.push(new Vec2(x + nodePos.x, y + nodePos.y));\n        })\n        for (let i = 0; i < vertices.length; i++) {\n            let curPos = vertices[i];\n            let nextPos = (i + 1 == vertices.length) ? vertices[0] : vertices[i + 1];\n            let slope = (nextPos.y - curPos.y) / (nextPos.x - curPos.x);\n            let cond1 = (curPos.x <= pointPos.x) && (nextPos.x > pointPos.x);\n            let cond2 = (nextPos.x <= pointPos.x) && (curPos.x > pointPos.x);\n            let above = (pointPos.y < slope * (pointPos.x - curPos.x) + curPos.y);\n            if ((cond1 || cond2) && above) {\n                crossings++;\n            }\n        }\n        return (crossings % 2 != 0);\n    }\n\n    public onMouseEnterSpace(param: MouseParam) {\n        this.addForce(v2(10, 0));\n    }\n\n    public onMouseLeaveSpace(param: MouseParam) {\n        this.addForce(v2(10, 0));\n    }\n\n    public pause() {\n        //LogManager.log(\"AAAAAAAAAA\", this._rigidbody.linearVelocity)\n        if (this._rigidbody) {\n            this._curSpeed = this._rigidbody.linearVelocity;\n            this._rigidbody.linearVelocity = Vec2.ZERO;\n        }\n    }\n\n    public resume() {\n        //LogManager.log(\"BBBBBBBBBB\", this._rigidbody.linearVelocity)\n        if (this._rigidbody) {\n            this._rigidbody.linearVelocity = this._curSpeed;\n        }\n    }\n}\n\nexport interface ObjectParam {\n    name: string,\n    phyGroup?: Phy_Group,\n    isStatic?: boolean,\n    lineWidth?: number,\n    lineColor?: Color,\n    fillColor?: Color,\n}\n\nexport interface PhysicsParam {\n    friction: number,\n}\n\nexport enum ForceType {\n    /**无性质力 */\n    node = 1,\n    /**摩擦力 */\n    friction = 2,\n    /**弹力 */\n    elasticForce = 3\n}\n\nexport enum ObjectVisualTag {\n    background = 1,\n    middle = 2,\n    front = 3,\n}\n\nexport interface ObjectInfo {\n    id: number,\n    name: string,\n    type: ObjectType,\n    tipData?: GameTipData[],\n}"]}