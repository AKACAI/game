{"version":3,"sources":["file:///D:/cocos_projects/physics_education_game/assets/scripts/manager/TimerManager.ts"],"names":["TimerManager","PriorityQueue","Utils","_getID","_curID","init","_timerList","a","b","_nextTriggerTime","_insertList","Array","console","log","update","count","Math","min","length","_dealInsertCount","i","insertTimer","shift","push","execute","topTimer","top","getCurTimeStamp","pop","_isDestroy","_loop","_triggerTime","_callback","_param","_target","addTimer","delayTime","isLoop","triggerTime","callback","param","target","id","timer","_id","_delayTime","removeTimer","targetIndex","findIndex","splice","find","print","toString"],"mappings":"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","sourcesContent":["import PriorityQueue from \"../utils/PriorityQueue\";\nimport Utils from \"../utils/Utils\";\n\n// 加载任务\ninterface TimerTask {\n   _id: number;\n   _triggerTime: number; //每次触发间隔时间(ms)\n   _delayTime: number; //第一次触发的延迟时间(ms)\n   _nextTriggerTime: number; //下次触发的时间戳(ms)\n   _loop: boolean; //是否循环\n   _param: any; //附带数据\n   _isDestroy: boolean;     //定时器是否被销毁\n   _callback: any; //回调函数\n   _target: any; //回调函数所在的对象\n}\n\nexport default class TimerManager {\n    private static _timerList: PriorityQueue<TimerTask>;\n\n    private static _insertList: Array<TimerTask>;\n    //private static _curTimeStamp : number;  // 当前的时间戳\n\n    private static readonly _dealInsertCount = 10;  // 一帧里面最多可以插入多少个定时器\n\n    private static _curID: number = 0;\n    private static get _getID(): number {\n        return this._curID++;\n    }\n\n    public static init() {\n        TimerManager._timerList = new PriorityQueue<TimerTask>((a: TimerTask, b: TimerTask) : number => {\n            if (a._nextTriggerTime > b._nextTriggerTime) {\n                return 1;\n            }\n            else if (a._nextTriggerTime == b._nextTriggerTime) {\n                return 0;\n            }\n            else {\n                return -1;\n            }\n        });\n        TimerManager._insertList = new Array<TimerTask>();\n        console.log(\"TimerManager初始化完成!\");\n    }\n\n    public static update() {\n        // 遍历插入列表，最多_dealInsertCount个地插入到优先级队列里面\n        let count = Math.min(this._insertList.length, TimerManager._dealInsertCount);\n        for (let i = 0; i < count; i++) {\n            let insertTimer = this._insertList.shift();\n            \n            // TODO 可能是这个push的问题？\n            this._timerList.push(insertTimer);\n        }\n\n        TimerManager.execute();\n    }\n\n    private static execute() {\n        let topTimer = this._timerList.top();\n        if (topTimer && topTimer._nextTriggerTime <= Utils.getCurTimeStamp()) {\n            // console.log(this._timerList);\n            topTimer = this._timerList.pop();\n            if (topTimer._isDestroy) {\n                TimerManager.execute();\n                return;\n            }\n            if (topTimer._loop) {\n                topTimer._nextTriggerTime = Utils.getCurTimeStamp() + topTimer._triggerTime;\n                TimerManager._insertList.push(topTimer);\n            }\n            topTimer._callback(topTimer._param, topTimer._target);\n            TimerManager.execute();\n            return;\n        }\n    }\n\n    /**\n     * 添加一个定时器\n     * @param delayTime 第一次延迟多久触发（ms），如果是0则立即触发\n     * @param isLoop 是否循环\n     * @param triggerTime 每次触发的时间间隔（ms）\n     * @param callback 回调\n     * @param param 参数\n     * @param target 回调的对象\n     * @returns \n     */\n    public static addTimer(delayTime: number = 0, isLoop: boolean, triggerTime: number, callback: any, param?: any, \n         target: any = this): number {\n        if (triggerTime <=0 || delayTime < 0) {\n            console.log(\"定时器的触发时间不能为负数！！！！！！\");\n            return -1;\n        }\n        let id = TimerManager._getID;\n        let timer: TimerTask = {\n            _id: id,\n            _callback: callback,\n            _loop: isLoop,\n            _param: param,\n            _triggerTime: triggerTime,\n            _delayTime: delayTime,\n            _target: target,\n            _nextTriggerTime: Utils.getCurTimeStamp() + delayTime,\n            _isDestroy: false,\n        }\n        TimerManager._insertList.push(timer);\n        return id;\n    }\n\n    /**\n     * 通过id删除一个定时器\n     * @param id 目标id\n     * @returns 是否成功删除\n     */\n    public static removeTimer(id: number): boolean {\n        // 如果该定时器在插入列表中，就直接移除并返回就好了\n        let targetIndex = this._insertList.findIndex((timer) => {\n            return timer._id == id;\n        });\n        if (targetIndex >= 0) {\n            this._insertList.splice(targetIndex);\n            return true;\n        }\n\n        // 找到在优先级队列里的目标，直接把摧毁标志置为true，当定时器遇到它的时候直接跳过它即可\n        let timer = this._timerList.find((a: TimerTask): boolean => {\n            return a._id == id;\n        });\n        if (timer) {\n            timer._isDestroy = true;\n            return true;\n        }\n        return false;\n    }\n\n    // TODO 通过回调删除一个定时器\n\n    public static print() {\n        TimerManager._timerList.print((a: TimerTask): string => {\n            return a._id.toString();\n        });\n    }\n}"]}