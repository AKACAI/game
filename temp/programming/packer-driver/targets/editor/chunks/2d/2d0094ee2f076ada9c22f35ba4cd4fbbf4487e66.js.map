{"version":3,"sources":["file:///D:/cocos_projects/physics_education_game/assets/scripts/manager/map_manager/MapData.ts"],"names":["MapData","_decorator","Singleton","LogManager","ResManager","LoadType","ccclass","property","constructor","inited","init","finishCb","mapDatas","getInstance","loadBundle","loadAsset","JSON","json","mapData","mode2MapDatas","i","length","modeItemData","modeID","modeId","err","error","getModeDatas","warn","getModeDatasById","loadMapData","mapName"],"mappings":"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","sourcesContent":["\r\nimport { _decorator, JsonAsset } from \"cc\";\r\nimport { Singleton } from \"../../common/Singleton\";\r\nimport LogManager from \"../../utils/LogManager\";\r\nimport { ResManager, LoadType } from \"../ResManager\";\r\nimport { IPreInit } from \"../../common/IPreInit\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport interface IOpenObjectData {\r\n    objectId: number,\r\n    name: string,\r\n    pos: string,\r\n    rot: string,\r\n    sca: string,\r\n    objectType: number,\r\n    shapeParam: any,\r\n    objectParam: any,\r\n}\r\n\r\nexport interface IOpenMapData {\r\n    mapPath: string,\r\n    objectDatas: any,\r\n}\r\n\r\nexport interface IMapConfig {\r\n    modeId: number,\r\n    modeName: string,\r\n    modeBg: string\r\n    levelDatas: {\r\n        levelId: number,\r\n        levelPath: string,\r\n        isLock: number,\r\n    }[],\r\n}\r\n\r\nexport default class MapData extends Singleton {\r\n    private inited: boolean = false;\r\n    private mapDatas: { [mapName: string]: IOpenMapData };\r\n    private mode2MapDatas: { [mode: number]: IMapConfig };\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public init(finishCb?: () => void) {\r\n        this.mapDatas = {};\r\n        ResManager.getInstance().loadBundle(\"map\", () => {\r\n            this.inited = true;\r\n            ResManager.getInstance().loadAsset(\"mapConfig\", LoadType.JSON, \"map\", (json: JsonAsset) => {\r\n                let mapData = json.json as IMapConfig[];\r\n                if (mapData) {\r\n                    this.mode2MapDatas = {};\r\n                    for (let i = 0; i < mapData.length; i++) {\r\n                        const modeItemData = mapData[i];\r\n                        const modeID = modeItemData.modeId;\r\n                        this.mode2MapDatas[modeID] = modeItemData;\r\n                    }\r\n                }\r\n                if (finishCb) {\r\n                    finishCb();\r\n                }\r\n            }, (err) => {\r\n                LogManager.error(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    public getModeDatas() {\r\n        if (!this.inited) {\r\n            LogManager.warn(\"MapManager未初始化\");\r\n            return;\r\n        }\r\n        return this.mode2MapDatas;\r\n    }\r\n\r\n    public getModeDatasById(modeId: number) {\r\n        if (!this.inited) {\r\n            LogManager.warn(\"MapManager未初始化\");\r\n            return;\r\n        }\r\n        if (this.getModeDatas) {\r\n            return this.mode2MapDatas[modeId];\r\n        }\r\n    }\r\n\r\n    public loadMapData(mapName: string, finishCb?: (mapData: IOpenMapData) => void) {\r\n        if (!this.inited) {\r\n            LogManager.warn(\"MapManager未初始化\");\r\n            return;\r\n        }\r\n        if (this.mapDatas[mapName]) {\r\n            let mapData = this.mapDatas[mapName];\r\n            finishCb?.(mapData);\r\n        }\r\n        else {\r\n            ResManager.getInstance().loadAsset(mapName, LoadType.JSON, \"map\", (json: JsonAsset) => {\r\n                let mapData = json.json as IOpenMapData;\r\n                this.mapDatas[mapName] = mapData;\r\n                finishCb?.(mapData);\r\n            }, (err) => {\r\n                LogManager.error(err);\r\n            });\r\n        }\r\n    }\r\n}"]}