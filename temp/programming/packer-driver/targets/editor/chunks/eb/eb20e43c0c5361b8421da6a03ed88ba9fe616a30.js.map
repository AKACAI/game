{"version":3,"sources":["file:///E:/education_game/game/assets/scripts/modules/ui/game_panel/GridSquare.ts"],"names":["_decorator","Component","tween","Vec3","Utils","ccclass","property","GridSquare","gridOriginSize","x","y","maxScale","minScale","zoomSpeed","moveSpeedRate","init","reset","initFunc","zoomIn","targetScale","clamp","_curScale","targetPosX","node","getPosition","targetPosY","_tweenAnim","stop","to","scale","position","start","zoomOut","move","deltaPos","setPosition","setScale"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Tween, tween, UITransform, v2, Vec2, Vec3 } from 'cc';\nimport Utils from '../../../utils/Utils';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('GridSquare')\nexport class GridSquare extends Component {\n    private readonly gridOriginSize: { x: number, y: number } = { x: 64, y: 64 };\n    private readonly maxScale: number = 3;\n    private readonly minScale: number = 0.5;\n    private readonly zoomSpeed: number = 0.1;\n    private readonly moveSpeedRate: number = 0.4;\n\n    private _curScale: number;\n    private _tweenAnim: Tween<Node>;\n\n    public init() {\n        this.reset();\n        this.initFunc();\n    }\n\n    private initFunc() {\n        //EventManager.getInstance().addListener(EventStr.StartZoomInGrid, this.onZoomInGrid);\n        //EventManager.getInstance().addListener(EventStr.StartZoomOutGrid, this.onZoomInGrid);\n        //EventManager.getInstance().addListener(EventStr.EndZoomInGrid, this.onZoomInGrid);\n        //EventManager.getInstance().addListener(EventStr.EndZoomOutGrid, this.onZoomInGrid);\n    }\n\n    public zoomIn() {\n        let targetScale = Utils.clamp(this._curScale + this.zoomSpeed, this.minScale, this.maxScale);\n        let targetPosX = this.node.getPosition().x * targetScale / this._curScale;\n        let targetPosY = this.node.getPosition().y * targetScale / this._curScale;\n        this._curScale = targetScale;\n\n        this._tweenAnim?.stop();\n        this._tweenAnim = tween(this.node)\n            .to(0.2, { scale: new Vec3(targetScale, targetScale, 1), position: new Vec3(targetPosX, targetPosY, 0) });\n        this._tweenAnim.start();\n    }\n\n    public zoomOut() {\n        let targetScale = Utils.clamp(this._curScale - this.zoomSpeed, this.minScale, this.maxScale);\n        let targetPosX = this.node.getPosition().x * targetScale / this._curScale;\n        let targetPosY = this.node.getPosition().y * targetScale / this._curScale;\n        this._curScale = targetScale;\n\n        this._tweenAnim?.stop();\n        this._tweenAnim = tween(this.node)\n            .to(0.2, { scale: new Vec3(targetScale, targetScale, 1), position: new Vec3(targetPosX, targetPosY, 0) });\n        this._tweenAnim.start();\n    }\n\n    public move(deltaPos: Vec2) {\n        let targetPosX = this.node.getPosition().x + deltaPos.x * this.moveSpeedRate;\n        let targetPosY = this.node.getPosition().y + deltaPos.y * this.moveSpeedRate;\n        while (targetPosX > this.gridOriginSize.x * this._curScale) {\n            targetPosX -= this.gridOriginSize.x * this._curScale;\n        }\n        while (targetPosX < -this.gridOriginSize.x * this._curScale) {\n            targetPosX += this.gridOriginSize.x * this._curScale;\n        }\n        while (targetPosY > this.gridOriginSize.y * this._curScale) {\n            targetPosY -= this.gridOriginSize.y * this._curScale;\n        }\n        while (targetPosY < -this.gridOriginSize.y * this._curScale) {\n            targetPosY += this.gridOriginSize.y * this._curScale;\n        }\n        this.node.setPosition(targetPosX, targetPosY, 0);\n    }\n\n    private reset() {\n        this._curScale = 1;\n        this.node.setPosition(0, 0, 0);\n        this.node.setScale(1, 1, 1);\n    }\n}\n\n\n"]}